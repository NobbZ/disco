%%-*- mode: erlang -*-
[
 {disco, [

          %% --- local components ---

          {do_component_test, false},

          %% commands relative to the current directory
          {validator, "priv/integration-test/components/validator.rb"},
          {barkeeper, "priv/integration-test/components/barkeeper.rb"},
          {changer,   "priv/integration-test/components/changer.rb"},
          {gui,      ["priv/integration-test/components/tests.py 2>log/integration-test.log"]},


          %% --- remote workers ---

          %% worker commands relative to the remote_node_path_prefix
          %% '%id%' will be replaced by the worker id (e.g. 'pwb_01'; see workers)
          {worker_run_cmd,  "make run  -sC priv/integration-test/workers/%id%/"},
          {worker_name_cmd, "make name -sC priv/integration-test/workers/%id%/"},
          {workers, [%% {<worker id>, <ip address>, <additional information>}
                     {pwb_00, '127.0.0.1', ""}
                    ]
          },

          %% disable autosave for tests
          {autosave_dir, disabled},       %% :: string() | disabled

          %% When the cluster is started in parallel, multiple nodes are booted
          %% at the same time. The degree of parallelism can be adjusted through
          %% the slice size which determines the number of concurrent threads to use.
          %% Make sure `MaxStartups' in the config of your ssh daemon is large enough.
          {cluster_start_mode, parallel},  %% :: sequential | parallel  (default: sequential)
          {startup_slice_size, 10},        %% :: pos_integer()          (default: 10)


          %% --- list of problems to solve ---

          {problems, [%% {<description>, <specification>, <answer time>, <start state>}
                      {"ten",            "[10] 42",       1000,          "[1]"},
                      {"twenty",         "[20] 42",       1000,          "[1]"}
                     ]
          }
         ]
 }
].
