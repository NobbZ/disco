%%-*- mode: erlang -*-
[
 {disco, [

          %% --- local components ---

          %% commands relative to the current directory
          {validator, "make run -sC priv/countdown2/components/validator/"},
          {barkeeper, "./priv/countdown2/components/barkeeper/barkeeper.rb"},
          {changer,   "./priv/general/components/changer/changer.rb"},
          {gui,      ["make run -sC priv/general/components/gui/"]},


          %% --- remote workers ---

          %% remote directory containing the 'ebin', 'deps' and 'apps' folder
          %% If this is an empty string (default), the folder structure and
          %% location is assumed to be the same on master and slave nodes.
%         {remote_node_path_prefix, "/home/flo/dev/disco/"},

          %% worker commands relative to the remote_node_path_prefix
          %% '%id%' will be replaced by the woker id (e.g. 'pwb_01'; see workers)
          {worker_run_cmd,  "make run  -sC priv/countdown2/workers/%id%/"},
          {worker_name_cmd, "make name -sC priv/countdown2/workers/%id%/"},
          {workers, [%% {<worker id>, <ip address>, <additional information>}
                     {pwb_72, '127.0.0.1', ""},
                     {pwb_73, '127.0.0.1', ""},
                     {pwb_74, '127.0.0.1', ""}
                    ]
          },

          %% When the cluster is started in parallel, multiple nodes are booted
          %% at the same time. The degree of parallelism can be adjusted through
          %% the slice size which determines the number of concurrent threads to use.
          %% Make sure `MaxStartups' in the config of your ssh daemon is large enough.
          {cluster_start_mode, parallel},  %% :: sequential | parallel  (default: sequential)
          {startup_slice_size, 10},        %% :: pos_integer()          (default: 10)

          {score_mode, ranked},            %% :: raw | normalized | ranked

          %% --- list of problems to solve ---

          {problems, [%% {<description>,       <specification>,                   <answer time>, <start state>}
                      {"1,3,3,7 => 42",        "[1,3,3,7] 42",                            10000, ""           },
                      {"example",              "fiblist(6) 42",                           10000, ""           },
                      {"example (kurz)",       "fiblist(6) 42",                            2000, ""           },
                      {"example (lang)",       "fiblist(6) 42",                           25000, ""           },
                      {"simple",               "[8,16] 8",                                10000, ""           },
                      {"simple2",              "(2..4) 6",                                 5000, ""           },
                      {"5 1en => 5",           "[1]*5 5",                                 10000, ""           },
                      {"1,2,3 doppelt => 19",  "[1,2,3]*2 19",                            10000, ""           },
                      {"6 3en => 33",          "[3]*6 33",                                20000, ""           },
                      {"10 2en => 1024",       "[2]*10 1024",                             20000, ""           },
                      {"2,4,8,16,32 => 4096",  "[2,4,8,16,32] 4096",                      20000, ""           },
                      {"primes < 30 => 999",   "[2,3,5,7,11,13,17,19,23,29] 999",         20000, ""           },
                      {"primes < 30 => 5413",  "[2,3,5,7,11,13,17,19,23,29] 5413",         5000, ""           },
                      {"primes < 30 => 5413 (Bier)", "[2,3,5,7,11,13,17,19,23,29] 5413", 150000, ""           },
                      {"fib[1..9] => fib[19]", "fiblist(9) 4181",                         20000, ""           },
                      {"fib[1..9] => fib[20]", "fiblist(9) 6765",                         20000, ""           },
                      {"15 fibs",              "fiblist(15) 42",                          30000, ""           },
                      {"1 & 10 -> 10000",      "[1]*3+[10]*5 10000",                      30000, ""           },
                      {"Just 42",              "[42] 42",                                 15000, ""           },
                      {"extended example",     "[1,1,2,3,5,6,4,4,4,8] 42",                20000, ""           },
                      {"Ackermann",            "[1,2,3,5,13,65533] 42",                   20000, ""           },
                      {"binary",               "[1,10,11,100,101,110] 111",               20000, ""           },
                      {"geht nicht? (Bier)",   "(1..10).map{|x|2**x} 1",                 150000, ""           },
                      {"viel gross",           "[69871,32417,643810,236498,1460592,3465987,29348761,92332720] 1", 20000, ""},
                      {"NG Example",           "[1,3,4,5]*3 2",                           30000, ""           },
                      {"uuuh complexity",      "[1,2]*4+[10]*3+[500,1000] 1",             20000, ""           },
                      {"Final Round",          "[1,5,7]*3 2",                             60000, ""           },

                      %% additional rounds with modulo operation
                      {"100 1en",              "[1]*100 2",                               20000, ""           },
                      {"1-100",                "(1..100) 2",                              20000, ""           },
                      {"1-20 => 1337",         "(1..20) 1337",                             1000, ""           },
                      {"100-115 => 1337",      "(100..115) 1337",                          1000, ""           },
                      {"[10,20,30,40]*2 => 1", "[10,20,30,40]*2 1",                        1000, ""           },
                      {"primes < 30 => 999",   "[2,3,5,7,11,13,17,19,23,29] 999",         60000, ""           },
                      {"primes < 30 => 5413",  "[2,3,5,7,11,13,17,19,23,29] 5413",        60000, ""           }
                     ]
          }
         ]
 }
].
